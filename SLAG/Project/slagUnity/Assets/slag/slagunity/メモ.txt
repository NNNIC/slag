-------
方針

スクリプトの提供。
デバッグできること。
ネィティブコードと共存。
スピードはそこそこ。複雑な部分はネィティブで行う。スクリプトは補助。
既存のエディタで文法が確認できること。
大文字小文字は区別しない。非プログラマを考慮のため。
難しいことは基本的にしない。－－クラスとかいらない。必要であれば、ネィティブ側で提供

業務外に作成し公開して今後利用する。



基本的な使い道
１．提供中アプリのパラメータを変更
２．バージョンアップせずにアップデートの提供
３．フロントエンド


------
・process -> New class へ
・外部からの関数実行　
・外部からの変数値参照・値変更・新規・削除

・loction -> poinervariable ポインタ変数に変更 pointervar


・YVALUE の o には、大文字強制まえの文字が入っているようにしよう。

・デバッグの回収
  1. ファイルＩＤの導入 --- 複数ファイルに対応
  2. ブレイクポインタは、ファイルＩＤと行番号
  
・複数ファイルの対応
  複数ファイルをロードできる。

・3項演算子の導入 -- 失敗
  a ? b : c

・ハンドル形式にかえようか・・・　それともYValueを返却する？
  var wd = load(src,id);   idはデバッグ時の識別に使用。
  wd.run();
  こんな具合に。

・Unity用の初期化を考えないと・・・ 再初期化ができるように・・・

・スピード 遅い。当然。

・メモリ GCが多い。update悲惨。

・コメントアウト /* */がないと不便。

・Update中の例外処理を 例外キャッチー＞アップデートをDisableへ

・セミコロンエラー検出が遅い。

・デモ　ストップウォッチ

・マイナスの認識ができない。


前付き + - ! ~ ^ ++ -- →先頭時。2項演算子の後    op expr で振るう。
後付き ++ -            →後尾時。２項演算子の前。 expr op で振るう。
特殊  ? :              →3項演算子  expr ? expr : expr    で振るう。 

TokenProvder通過後に オペレータとexprの塊になっている。
例）
op expr op expr op op expr op

これで、前付き・後付きの条件で分割する。

    
計算式

１．演算子で分割された要素を解析
２．ポインタ変数要素を解析
３．前置演算子要素を解析
４．後置演算子要素を解析
５．三項演算子要素を解析

USE_TRY でエクセプション回避いれた。

終了ができない？ --> FilePipeのみ可能。

NamedPipeは終了問題が解決できないので使用不可。

メソッド検索時にFloat,Doubleを同意として扱う。 それをUnityだけとすればよい！　そうすれば、通常はDoubleとなり有効数字が15 (Singleは７)
-- メソッドサーチの問題が残るのみ。

次はこんな仕様

var h = hashtable();
h.v = 10;
h.l = [];

---

ログ関数は分かり易くファイル名で表示しておく

---

インスタンス時もタイプチェック必須。コンバートもやろう！

https://msdn.microsoft.com/en-us/library/h93ya84h(v=vs.110).aspx


---

エラー文言確認せよ。 <------------------ ※重要

---

v.s = "." 等は、まずいんじゃないか？　定義名等がスクリプトで使用できない <------------------------------- ※ 
                                      実行中は大文字のみだから心配ないかも。
---

util.isNumericType() <--------------- 作成せよ。

---

ARRAY と LIST を.NETにあわせろ！

JSにあわせようとしたけど、実行はＣ＃だから概念はＣ＃にあわせるべきだと今は思う。  --> DONE!

---

ステートマシンを再考

var sm = StateMachine();  
sm.Goto("");

var sm = StateMachine(gameObject);

---

複数ファイルへの対応
YVALUEに file_idを追加

---

デバッガ！
load a.js b.js c.js を可能にする。
順にidが0,1,2と振られる
モニターのソース名がリストボックス
ソースは行番号付きで出力。


----

[YVALUEの最適化 GetOptimize]

test54.js 適用前:0.519sec 適用後:0.507sec  差13msec

[New時にキャッシュ]

test54.js 適用前:0.507sec 適用後:0.467sec  差40msec

----

Debug.Logを無効化せよ。---> Done!

----
高速化

UnityEngine.GameObject -> @134:"UnityEngine.GameObject" --- 却下

@NNN:"タイプ名" 
  
@   --- 事前検索済み
NNN --- 

----
高速化

ハッシュ化　検索をせずに一義で見つける

test54.js 適用前:0.467sec 適用後:0.267sec  差200msec <--------- GREAT!

----
アセンブリ名省略

ファイル先頭に・・・
"using UnityEngine";
"using System";

----

ストップウォッチ作成

----
バッチ

test94.cmd
 load test94-1.js test94-2.js test94-3.js

batch test94.cmd

----
ブレイクポイント

BP 行番号 [ファイル番号]
ファイル番号を省略可能に。

ファイル番号　指定なし時は最初のファイル。
一度指定すると前のを覚えている。
---
Hashtableを JSのオブジェクト同様の宣言ができるようにする。

var o = {x;1,y:2};
---
using 機能を実装したが、変数名との区別ができない。自由度が下がるので解決したい。

new Vector3(1,2,3);

sx_expr -+-NEW
         |
		 +-sx_func -+- RUNTYPE = UnityEngine.GameObject
		            |
					+- sx_bracket = (1,2,3)

---------------------------
変数名は　$を入れる！
関数、および、ビルトイン関数は、$を入れる。

---
現時点のパフォーマンス

test54.js 前回:0.267sec  現在:0.169    差98msec <--------- GREAT!

---

ビルトインファンクションがない場合にエラーにならない。

PlintLn(Time.time);  // PrintLn　が正しい。でもエラーなし！

---

エラーの出し方の統一か規定

解析中
 sys.error


スクリプト内のファンクション
 runtime.util.error

スクリプト外のファンクション component内等
 ?

理論的にありえない
 throw SystemException("unexpected");


----

if 文があいまいのままだ。　　　　　　　　　　　　　--- Fixed!

if (xx) for(var i = 0; i<100; i++) z+=i;


[対策]
_update_clause_values()を変更
後ろから処理
()ブラケットの後ろから取り出す。

----

AddBehaviour / StateManagerの引数ない場合おGameObjectが依存している。

依存しないように！

----

※仕様変更
Hashtableに設定した関数を呼び出すと第一引数は同関数が登録されていたHashtableを返す。

var ht = Hashtable();
ht.func = Hoge;

ht.func()
  |
  call -  function Hoge($ht)
          {
          }

ht.func($x)
 |
 call -   function Hoge($ht,$x)
          {
		  }
-----

※仕様変更

slagipc_monobehaviour の登録関数の引数を GameObjectから 自コンポネント(slagipc_monobehaviour)とする。

-----

※仕様変更

ステートマネージャのステート関数の引数を２つに 

function S_HOGE(sm,bFirst)   1番目の引数はステートマネージャ
{
}

-----

debug 1 --- analyze    - 表示なし
　　　      run        - bp可能 
            exception  - 表示のみでUnity停止なし
            call失敗   - 表示
            ポインタ値 - nullワーニング
debug 2 --- analyze    - 表示あり
            run        - bp可能
            exception  - Unityエラー停止
            call失敗   - 表示
            ポインタ値 - null停止
            
-----



